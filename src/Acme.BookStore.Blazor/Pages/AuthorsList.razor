@page "/AuthorsList"
@inject IAuthorAppService AuthorAppService
@using Acme.BookStore.Authors;
@using Acme.BookStore.Books;
@using Blazorise
@using Blazorise.DataGrid


@code {

    public partial class Author
    {
        public bool AdvancedSearch { get; set; }
        public bool IsDataGridFilterable { get; set; } = false;
        private int? Sequence { get; set; }
        private string FilterValue { get; set; }
        private AuthorDto selectedAuthorDto;
        private AuthorSearchDto AuthorSearch { get; set; } = new AuthorSearchDto();
        private List<AuthorDto> AuthorList { get; set; }
        private int PageSize { get; set; } = 10;
        private int CurrentPage { get; set; }
        private string CurrentSorting { get; set; }
        private int TotalCount { get; set; }
        private AuthorDto AuthorDto { get; set; }
        public Author()
        {
            AuthorDto = new AuthorDto();
        }
        protected override async Task OnInitializedAsync() => await GetAuthorListAsync();


        private async Task GetAuthorListAsync()
        {
            try
            {
                var getAuthorListDto = new GetAuthorListDto();
                getAuthorListDto.MaxResultCount = PageSize;
                getAuthorListDto.SkipCount = CurrentPage * PageSize;
                getAuthorListDto.Sorting = CurrentSorting;
                getAuthorListDto.Filter = !string.IsNullOrEmpty(FilterValue) ? FilterValue : string.Empty;
                getAuthorListDto.AuthorSearch = AuthorSearch;
                var result = await AuthorAppService.GetPagedListAsync(getAuthorListDto);

                AuthorList = (List<AuthorDto>)result.Items;
                TotalCount = (int)result.TotalCount;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
} 