@page "/"
@using Volo.Abp.MultiTenancy
@inherits BookStoreComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>
<h1>
    Room : @room.RoomName
</h1>
<h1>
    Price : @room.Price
</h1>
<Span> This room Is  @(room.IsActive ? "Active" : "InActive")</Span>
    <input type="number" @bind-value="room.Price" @bind-value:event="oninput" />
    <br />
    <input type="checkbox" @bind-value="room.IsActive" checked="@(room.IsActive?"checked":null)" />
    <select @bind="SelectedRoomProp">
        @foreach (var prop in room.RoomProps)
    {
        <option value="@prop.Name">@prop.Name</option>
    }
</select>
    <Span>The Room Prop selected is : @SelectedRoomProp</Span>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    class BlazorRoomProp
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
    }
    class Room
    {
        public int Id { get; set; }
        public string RoomName { get; set; }
        public bool IsActive { get; set; }
        public int Price { get; set; }
        public List<BlazorRoomProp> RoomProps { get; set; }
    }
    Room room = new()
        {
            Id = 1,
            RoomName = "Villa Suit",
            IsActive = true,
            Price = 999,
            RoomProps = new List<BlazorRoomProp>
            {
                new BlazorRoomProp{Id = 1 , Name= "Sq Ft",Value = "100"} ,
                new BlazorRoomProp{Id = 2 , Name ="Occupancy",Value = "3"}
            }
        };
    string SelectedRoomProp = "";

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}